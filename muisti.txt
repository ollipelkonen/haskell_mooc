stack runhaskell Set2aTest.hs


ghci
stack ghci
stack runhaskell Set1Test.hs
stack ghci Set8.hs

:browse

price = if product == "milk" then 1 else 2


iterate f 0 x = [x]
iterate f n x = x : iterate f (n-1) (f x)


:load Example.hs

Prelude> :{
Prelude| polynomial :: Double -> Double
Prelude| polynomial x = x^2 - x - 1
Prelude| :}
Prelude> polynomial 3.0
5.0

A
Data.List


f :: (Eq a) => (a -> a) -> a -> Bool
f g x = x == g x

import Data.List
nub [3,5,3,1,1]   ->   [3,5,1]
sortByLength = sortBy (comparing length)
1 :: Double
fromIntegral 1 :: Double
read "3" :: Int

foldr (+) 0 [1,2,3] ==> foldr (+) 0 (1:2:3:[])
                    ==> 1 + (foldr (+) 0 (2:3:[]))
                    ==> 1 + (2 + (foldr (+) 0 (3:[])))
                    ==> 1 + (2 + (3 + (foldr (+) 0 [])))
                    ==> 1 + (2 + (3 + 0))


import qualified Data.Map as Map
import Data.Maybe (isJust)
import Data.List


stack haddock --open
stack haddock --open <package>

https://hackage.haskell.org/package/base-4.14.1.0/
https://hoogle.haskell.org/


_hole


data Card = Joker | Heart Int | Club Int | Spade Int | Diamond Int
  deriving Show
data Person = MkPerson { name :: String, age :: Int, town :: String, state :: String, profession :: String}
  deriving Show

reverse list:
foldr (\x xs -> xs ++ [x]) [] 
foldr (\(x, y) zs -> x : y : zs) []

Ord
Num
Eq

\t -> (fst . fst $ t, (snd . fst $ t, snd t))

\t -> (fst ( fst t, (snd ( fst t, snd t ) )) )




1     3
-  +  - 
8     5


5   24
- +  -
40  40

29
-
40

